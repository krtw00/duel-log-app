Generic single-database configuration.

1️⃣ 履歴ファイルは「むやみにいじらないほうがよい」
Alembic のマイグレーションは DBの状態を時系列で管理するチェーン です
既に本番や開発DBに alembic upgrade で適用済みのマイグレーションを削除・書き換えると…
DBがマイグレーションの履歴とずれて整合性が崩れる
rollback や future migration でエラーが起きる
特に 初期テーブル作成（initial tables）や追加テーブル・カラム系 は注意
✅ → 既存DBやチームで運用している場合は、基本「触らない」

2️⃣ 「全部書き直して統一」は可能だが条件あり
開発初期で まだ本番DBがない なら可能
例：初期テーブル + 空マイグレーション + 最新追加分 → まとめて1本に再生成
その場合、DBをリセットして最初から alembic upgrade head する
本番DBがある場合は 書き直すと危険
過去の履歴が無くなるので、rollbackができなくなる
既存データを壊さないように 現行履歴に追記する のが安全
💡 → 開発段階なら統一OK、本番DBがある場合は現状維持で追記運用

Alembic の マイグレーションファイルは「DBスキーマの変更履歴」を記録する場所 であって、アプリの新機能や処理ロジックを書く場所ではありません。

2️⃣ 具体例（Duel Log Appの場合）

新機能追加例：「対戦ログをCSVでエクスポート」

マイグレーションファイル：不要
Python のサービス関数：必要（duels テーブルからデータ取得してCSV生成）
APIエンドポイント：必要（FastAPIルーター）
フロント：必要（ボタン、ダウンロードUI）

新機能追加例：「ユーザーにメールアドレス必須にする」

モデル変更：User クラスに email 必須追加
マイグレーション：email カラムを NOT NULL に変更（DB側変更が必要）
アプリ処理：認証・登録画面のバリデーション変更
フロント：フォームにメール入力欄追加

→ DB変更が伴う場合のみマイグレーションを書きます。
→ 機能追加だけならマイグレーションは不要。

調べてみた感じDBに変更を起こすようなことをやる時だけこのバージョン履歴ファイルが増えるっぽい
だからversionsフォルダは触らなくていいという結論になった
