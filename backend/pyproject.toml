[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
]
filterwarnings = [
    "ignore::DeprecationWarning:passlib",
    "ignore::PendingDeprecationWarning:starlette",
    "ignore::pydantic.warnings.PydanticDeprecatedSince20",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/alembic/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.git|
    \.hg|
    \.mypy_cache|
    \.tox|
    \.venv|
    _build|
    buck-out|
    build|
    dist|
    alembic/versions/.*.py
)/
'''

[tool.ruff]
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "E402"]
"app/main.py" = ["F401"]
"app/db/session.py" = ["F401"]
"app/db/base.py" = ["F401"]

[tool.ruff.lint.isort]
known-third-party = ["fastapi", "passlib", "pydantic", "sqlalchemy", "starlette", "uvicorn"]

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "duel-log-app-backend"
version = "0.1.0"

[tool.setuptools]
packages = ["app"]

