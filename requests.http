### ========================================
### 認証関連のAPI
### ========================================

### ユーザー登録
POST http://localhost:8000/users/
Content-Type: application/json

{
  "username": "testuser",
  "email": "test@example.com",
  "password": "securepassword123"
}

### ログイン（JWTトークン取得）
# @name login
POST http://localhost:8000/auth/login
Content-Type: application/json

{
  "email": "test@example.com",
  "password": "securepassword123"
}

### 現在のユーザー情報取得（認証必須）
# @name getCurrentUser
GET http://localhost:8000/me/
Authorization: Bearer {{login.response.body.access_token}}

### ========================================
### ユーザー管理API
### ========================================

### Get User by ID
GET http://localhost:8000/users/1

### Update User
PUT http://localhost:8000/users/1
Content-Type: application/json

{
  "username": "updateduser",
  "email": "updated@example.com"
}

### Delete User
DELETE http://localhost:8000/users/1

### ========================================
### デッキ管理API（認証必須）
### ========================================

### Create Deck
POST http://localhost:8000/decks/
Content-Type: application/json
Authorization: Bearer {{login.response.body.access_token}}

{
  "user_id": 1,
  "name": "My Second Deck",
  "is_opponent": true
}

### Get Decks for Current User
GET http://localhost:8000/decks/
Authorization: Bearer {{login.response.body.access_token}}

### Get Deck by ID
GET http://localhost:8000/decks/1
Authorization: Bearer {{login.response.body.access_token}}

### Update Deck
PUT http://localhost:8000/decks/1
Content-Type: application/json
Authorization: Bearer {{login.response.body.access_token}}

{
  "name": "Updated Deck Name"
}

### Delete Deck
DELETE http://localhost:8000/decks/1
Authorization: Bearer {{login.response.body.access_token}}

### ========================================
### デュエル管理API（認証必須）
### ========================================

### Create Duel
# @name createDuel
POST http://localhost:8000/duels/
Content-Type: application/json
Authorization: Bearer {{login.response.body.access_token}}

{
  "deck_id": 1,
  "opponentDeck_id": 2,
  "coin": true,
  "first_or_second": true,
  "result": true,
  "rank": 1,
  "notes": "A great duel!",
  "played_date": "2025-09-29T10:00:00"
}

### Get Duels for Current User
# @name getDuels
GET http://localhost:8000/duels/
Authorization: Bearer {{login.response.body.access_token}}

### Get Duel by ID
# @name getDuelById
GET http://localhost:8000/duels/1
Authorization: Bearer {{login.response.body.access_token}}

### Update Duel
# @name updateDuel
PUT http://localhost:8000/duels/1
Content-Type: application/json
Authorization: Bearer {{login.response.body.access_token}}

{
  "notes": "Updated notes for the duel."
}

### Delete Duel
# @name deleteDuel
DELETE http://localhost:8000/duels/1
Authorization: Bearer {{login.response.body.access_token}}

### ========================================
### テスト用（トークンなし）
### ========================================

### 認証なしでアクセス（401エラーになるはず）
GET http://localhost:8000/me/

### 無効なトークンでアクセス（401エラーになるはず）
GET http://localhost:8000/me/
Authorization: Bearer invalid_token_here
